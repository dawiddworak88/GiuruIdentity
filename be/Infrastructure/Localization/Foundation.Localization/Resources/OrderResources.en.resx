<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedProduct" xml:space="preserve">
    <value>Added</value>
  </data>
  <data name="AddingToCart" xml:space="preserve">
    <value>Adding to cart</value>
  </data>
  <data name="AddOrderItem" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddToCart" xml:space="preserve">
    <value>Add to cart</value>
  </data>
  <data name="BasketDeletedSuccessfully" xml:space="preserve">
    <value>The basket has been cleared successfully</value>
  </data>
  <data name="CancellationOrderError" xml:space="preserve">
    <value>Only newly created orders can be cancelled.</value>
  </data>
  <data name="CancelOrder" xml:space="preserve">
    <value>Cancel order</value>
  </data>
  <data name="ClearBasketText" xml:space="preserve">
    <value>Clear cart</value>
  </data>
  <data name="ClientRequiredErrorMessage" xml:space="preserve">
    <value>Select a client</value>
  </data>
  <data name="CustomOrderLabel" xml:space="preserve">
    <value>Add a custom order</value>
  </data>
  <data name="CustomOrderSubject" xml:space="preserve">
    <value>Custom order from</value>
  </data>
  <data name="DropOrSelectOrderFile" xml:space="preserve">
    <value>Drag and drop here, or click to select an order file</value>
  </data>
  <data name="EditOrder" xml:space="preserve">
    <value>Edit order</value>
  </data>
  <data name="EditOrderItem" xml:space="preserve">
    <value>Edit order item</value>
  </data>
  <data name="EnterSkuOrName" xml:space="preserve">
    <value>Enter SKU or product name</value>
  </data>
  <data name="ExternalReferenceLabel" xml:space="preserve">
    <value>Customer's own number:</value>
  </data>
  <data name="FabricsLabel" xml:space="preserve">
    <value>Fabrics</value>
  </data>
  <data name="GoToDetails" xml:space="preserve">
    <value>Go to details</value>
  </data>
  <data name="HistoryOfStatusChanges" xml:space="preserve">
    <value>History of status changes</value>
  </data>
  <data name="ImportOrder" xml:space="preserve">
    <value>Import order</value>
  </data>
  <data name="InitCustomOrderLabel" xml:space="preserve">
    <value>I want to place a custom order</value>
  </data>
  <data name="ItemNotFound" xml:space="preserve">
    <value>Product not found</value>
  </data>
  <data name="LackInformation" xml:space="preserve">
    <value>Lack of information</value>
  </data>
  <data name="MoreInfoLabel" xml:space="preserve">
    <value>More info:</value>
  </data>
  <data name="MyOrders" xml:space="preserve">
    <value>My orders</value>
  </data>
  <data name="NameLabel" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="NavigateToOrder" xml:space="preserve">
    <value>Back to order</value>
  </data>
  <data name="NavigateToOrdersList" xml:space="preserve">
    <value>Back to orders list</value>
  </data>
  <data name="NewOrder" xml:space="preserve">
    <value>Place order</value>
  </data>
  <data name="NoOrderItemsLabel" xml:space="preserve">
    <value>The cart is empty. Add first order item.</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>No variants available</value>
  </data>
  <data name="Order" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="OrderFileError" xml:space="preserve">
    <value>The order file is incorrect. Upload the correct order file.</value>
  </data>
  <data name="OrderItem" xml:space="preserve">
    <value>Order item</value>
  </data>
  <data name="OrderItemsLabel" xml:space="preserve">
    <value>Order items</value>
  </data>
  <data name="OrderNotFound" xml:space="preserve">
    <value>Order has not been found</value>
  </data>
  <data name="OrderPlacedSuccessfully" xml:space="preserve">
    <value>The order has been placed successfully. Your order is being processed. It will be visible on the list of orders soon.</value>
  </data>
  <data name="Orders" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="OrderStatus" xml:space="preserve">
    <value>Order status:</value>
  </data>
  <data name="ExpectedDateOfProductOnStock" xml:space="preserve">
    <value>Expected date of product on stock:</value>
  </data>
  <data name="OrderStatusNotFound" xml:space="preserve">
    <value>Order status has not been found</value>
  </data>
  <data name="OrderStatusUpdatedSuccessfully" xml:space="preserve">
    <value>Order status has been updated successfully.</value>
  </data>
  <data name="OrganisationNotFound:" xml:space="preserve">
    <value>Customer organization does not exist</value>
  </data>
  <data name="OutletQuantityLabel" xml:space="preserve">
    <value>Outlet quantity:</value>
  </data>
  <data name="PlaceOrder" xml:space="preserve">
    <value>Place order</value>
  </data>
  <data name="QuantityLabel" xml:space="preserve">
    <value>Quantity:</value>
  </data>
  <data name="SelectClientLabel" xml:space="preserve">
    <value>Select a client:</value>
  </data>
  <data name="SidebarTitle" xml:space="preserve">
    <value>Add the selected product variant to the cart</value>
  </data>
  <data name="SkuLabel" xml:space="preserve">
    <value>SKU:</value>
  </data>
  <data name="SuccessfullyCanceledOrder" xml:space="preserve">
    <value>Successfully canceled order.</value>
  </data>
  <data name="StockQuantityLabel" xml:space="preserve">
    <value>Stock quantity:</value>
  </data>
  <data name="ToBasketLabel" xml:space="preserve">
    <value>View cart</value>
  </data>
  <data name="UpdateOrderStatus" xml:space="preserve">
    <value>Update order status</value>
  </data>
  <data name="AreYouSureToCancelOrder" xml:space="preserve">
    <value>Are you sure you want to cancel the order.</value>
  </data>
  <data name="CancelationConfirmationDialog" xml:space="preserve">
    <value>Confirm the cancellation of the order</value>
  </data>
  <data name="CancelOrderItem" xml:space="preserve">
    <value>Cancel the order item</value>
  </data>
</root>